import { ATN, CharStream, DFA, Lexer } from "antlr4";
export default class CypherLexer extends Lexer {
    static readonly T__0 = 1;
    static readonly T__1 = 2;
    static readonly T__2 = 3;
    static readonly T__3 = 4;
    static readonly T__4 = 5;
    static readonly T__5 = 6;
    static readonly T__6 = 7;
    static readonly T__7 = 8;
    static readonly T__8 = 9;
    static readonly T__9 = 10;
    static readonly T__10 = 11;
    static readonly T__11 = 12;
    static readonly T__12 = 13;
    static readonly T__13 = 14;
    static readonly T__14 = 15;
    static readonly T__15 = 16;
    static readonly T__16 = 17;
    static readonly T__17 = 18;
    static readonly T__18 = 19;
    static readonly T__19 = 20;
    static readonly T__20 = 21;
    static readonly T__21 = 22;
    static readonly T__22 = 23;
    static readonly T__23 = 24;
    static readonly T__24 = 25;
    static readonly T__25 = 26;
    static readonly T__26 = 27;
    static readonly T__27 = 28;
    static readonly T__28 = 29;
    static readonly T__29 = 30;
    static readonly T__30 = 31;
    static readonly T__31 = 32;
    static readonly T__32 = 33;
    static readonly T__33 = 34;
    static readonly T__34 = 35;
    static readonly T__35 = 36;
    static readonly T__36 = 37;
    static readonly T__37 = 38;
    static readonly T__38 = 39;
    static readonly T__39 = 40;
    static readonly T__40 = 41;
    static readonly T__41 = 42;
    static readonly T__42 = 43;
    static readonly T__43 = 44;
    static readonly T__44 = 45;
    static readonly UNION = 46;
    static readonly ALL = 47;
    static readonly OPTIONAL = 48;
    static readonly MATCH = 49;
    static readonly UNWIND = 50;
    static readonly AS = 51;
    static readonly MERGE = 52;
    static readonly ON = 53;
    static readonly CREATE = 54;
    static readonly SET = 55;
    static readonly DETACH = 56;
    static readonly DELETE = 57;
    static readonly REMOVE = 58;
    static readonly CALL = 59;
    static readonly YIELD = 60;
    static readonly WITH = 61;
    static readonly RETURN = 62;
    static readonly DISTINCT = 63;
    static readonly ORDER = 64;
    static readonly BY = 65;
    static readonly L_SKIP = 66;
    static readonly LIMIT = 67;
    static readonly ASCENDING = 68;
    static readonly ASC = 69;
    static readonly DESCENDING = 70;
    static readonly DESC = 71;
    static readonly WHERE = 72;
    static readonly OR = 73;
    static readonly XOR = 74;
    static readonly AND = 75;
    static readonly NOT = 76;
    static readonly STARTS = 77;
    static readonly ENDS = 78;
    static readonly CONTAINS = 79;
    static readonly IN = 80;
    static readonly IS = 81;
    static readonly NULL = 82;
    static readonly COUNT = 83;
    static readonly CASE = 84;
    static readonly ELSE = 85;
    static readonly END = 86;
    static readonly WHEN = 87;
    static readonly THEN = 88;
    static readonly ANY = 89;
    static readonly NONE = 90;
    static readonly SINGLE = 91;
    static readonly EXISTS = 92;
    static readonly TRUE = 93;
    static readonly FALSE = 94;
    static readonly HexInteger = 95;
    static readonly DecimalInteger = 96;
    static readonly OctalInteger = 97;
    static readonly HexLetter = 98;
    static readonly HexDigit = 99;
    static readonly Digit = 100;
    static readonly NonZeroDigit = 101;
    static readonly NonZeroOctDigit = 102;
    static readonly OctDigit = 103;
    static readonly ZeroDigit = 104;
    static readonly ExponentDecimalReal = 105;
    static readonly RegularDecimalReal = 106;
    static readonly StringLiteral = 107;
    static readonly EscapedChar = 108;
    static readonly CONSTRAINT = 109;
    static readonly DO = 110;
    static readonly FOR = 111;
    static readonly REQUIRE = 112;
    static readonly UNIQUE = 113;
    static readonly MANDATORY = 114;
    static readonly SCALAR = 115;
    static readonly OF = 116;
    static readonly ADD = 117;
    static readonly DROP = 118;
    static readonly FILTER = 119;
    static readonly EXTRACT = 120;
    static readonly UnescapedSymbolicName = 121;
    static readonly IdentifierStart = 122;
    static readonly IdentifierPart = 123;
    static readonly EscapedSymbolicName = 124;
    static readonly SP = 125;
    static readonly WHITESPACE = 126;
    static readonly Comment = 127;
    static readonly EOF: number;
    static readonly channelNames: string[];
    static readonly literalNames: (string | null)[];
    static readonly symbolicNames: (string | null)[];
    static readonly modeNames: string[];
    static readonly ruleNames: string[];
    constructor(input: CharStream);
    get grammarFileName(): string;
    get literalNames(): (string | null)[];
    get symbolicNames(): (string | null)[];
    get ruleNames(): string[];
    get serializedATN(): number[];
    get channelNames(): string[];
    get modeNames(): string[];
    static readonly _serializedATN: number[];
    private static __ATN;
    static get _ATN(): ATN;
    static DecisionsToDFA: DFA[];
}
